version: 2.1

# Orbs: importam comandos ou jobs definidos pela comunidade para executar no seu workflow
orbs:
  heroku: circleci/heroku@2.0.0
  discord: antonioned/discord@0.1.0

# Commands: definem comandos de um ou mais steps que pode ser reutilizado em vários jobs
commands:
  instala_dependencias:
    steps:
      - run:
          name: Instala dependencias com uv
          command: |
            pip install uv
            uv venv
            source .venv/bin/activate
            uv pip install -r cocktail-api/requirements.txt

# Jobs: definem a ordem de comandos que serão executados passo a passo
jobs:
  greetings:
    docker:
      - image: cimg/base:stable
      # O executor default de docker é o large, com 4 vCPUs e 8GB RAM
      # Podemos mudar o executor com o comando a seguir e um dos valores possíveis:
      # lista de resource classes: https://circleci.com/docs/using-docker/#available-docker-resource-classes
      # resource_class: <class>
    resource_class: small
    steps:
      - run:
          command: echo "Workflow do projeto iniciado às $(date +%r)"
      - discord/status:
          success_message: "Workflow do commit #${CIRCLE_SHA1:0:7} iniciado..."

  test-and-build-backend:
    docker:
      - image: cimg/python:3.10
    resource_class: medium
    steps:
      - setup_remote_docker:
          # a build sem caching está durando menos de um minuto, vamos deixar este aqui desativado
          docker_layer_caching: false
      - checkout
      - instala_dependencias
      - run:
          name: Testes unitários da API
          command: |
            source .venv/bin/activate
            cd cocktail-api
            export PYTHONPATH=.
            pytest -c pytest.ini --junitxml="/tmp/reports/junit.xml" --cov=src/ --cov-report=term-missing .
      - store_test_results:
          # salva os resultados dos testes unitários para análise no circleci
          path: /tmp/reports
      - run:
          name: Build da imagem da API
          command: |
            docker build --tag cocktail-api:${CIRCLE_SHA1:0:7} --file ./cocktail-api/Dockerfile.api ./cocktail-api/
      # - discord/status:
      #     fail_only: true
      #     failure_message: ":red_circle: Algo deu errado no workflow de #${CIRCLE_SHA1:0:7}!"

  build-frontend:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - setup_remote_docker:
          # infelizmente um dos únicos jeitos de melhorar a performance do npm em CI é ativando caching
          docker_layer_caching: true
      - checkout
      - run:
          name: Build da imagem do site
          command: |
            docker build --tag cocktail-menu:${CIRCLE_SHA1:0:7} --file ./cocktail-menu/Dockerfile.site ./cocktail-menu/

  deploy-service:
    executor: heroku/default
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - heroku/install
      - heroku/push-docker-image:
          recursive: true
          process-types: "api site"
      - heroku/release-docker-image:
          process-types: "api site"

  farewell:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - run:
          command: echo "Workflow do projeto terminado às $(date +%r)"
      - discord/status:
          success_message: ":tada: Workflow do commit #${CIRCLE_SHA1:0:7} terminado com sucesso!"

# Workflows: orquestram a ordem dos jobs
workflows:
  build:
    jobs:
      - greetings:
          name: Notificação de começo do workflow
          context:
            # contém a variável sensível necessária para enviar notificações em outro serviço
            - Discord
      - test-and-build-backend:
          name: Teste e build do serviço de backend
          requires:
            - Notificação de começo do workflow
          # context:
          #   - Discord
      - build-frontend:
          name: Build do serviço de frontend
          requires:
            - Notificação de começo do workflow
      - deploy-service:
          name: Deploy do serviço
          context:
            - Heroku
          requires:
            - Teste e build do serviço de backend
            - Build do serviço de frontend
      - farewell:
          name: Notificação de fim do workflow
          context:
            - Discord
          requires:
            - Deploy do serviço
